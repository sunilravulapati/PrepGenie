import React from 'react';
import './TipsAndTricks.css';

const TipsAndTricks = () => {
    return (
        <div>
            <div className="card">
                <h2>General Interview Tips & Best Practices</h2>
                <p>This section contains curated, general advice for acing your interviews. For specific, on-demand tips generated by AI, please visit the <strong>AI Hub</strong>.</p>
            </div>
            <div className="card">
                <h3>Solving Questions on LeetCode/Other Platforms</h3>
                <p>Consistency is key when practicing on coding platforms. A structured approach to problem-solving will help you build a strong foundation.</p>
                <ul>
                    <li><strong>Understand the Problem:</strong> Before writing any code, read the problem carefully. Identify the inputs, outputs, and constraints. Work through a small example by hand.</li>
                    <li><strong>Start with Brute Force:</strong> Your first goal is to find a working solution, even if it's not the most efficient. This shows you can solve the problem.</li>
                    <li><strong>Optimize:</strong> Once you have a working solution, look for ways to improve its time and space complexity. Think about different data structures or algorithms that could help.</li>
                    <li><strong>Review Solutions:</strong> After you've submitted your best attempt, review the top-voted solutions. You'll often learn new techniques and more elegant ways to solve the problem.</li>
                </ul>
                <h4>Cautions:</h4>
                <ul>
                    <li><strong>Don't Just Copy Solutions:</strong> It's tempting to look at the answer right away, but you learn the most by struggling with the problem first.</li>
                    <li><strong>Avoid Burnout:</strong> Don't try to cram hundreds of problems in a short time. Focus on quality over quantity. It's better to deeply understand one problem than to superficially solve ten.</li>
                    <li><strong>Don't Get Stuck:</strong> If you're stuck on a problem for more than an hour, it's okay to look at a hint or a solution to understand the core concept you're missing.</li>
                </ul>
            </div>
            <div className="card">
                <h3>Tailoring Your Resume</h3>
                <p>A generic resume sent to dozens of companies is far less effective than a resume tailored to a specific role. Customizing your resume for each application shows the recruiter you've done your research and are genuinely interested in the position.</p>
                <ul>
                    <li><strong>Highlight Relevant Skills:</strong> Read the job description carefully and feature the skills and experiences that match what they're looking for at the top of your resume.</li>
                    <li><strong>Use Keywords:</strong> Many companies use Applicant Tracking Systems (ATS) to scan resumes. Include keywords from the job description to ensure your resume gets seen by a human.</li>
                    <li><strong>Company-Specific Language:</strong> If a company's values or mission resonates with you, briefly mention it in your summary or cover letter.</li>
                </ul>
                <h4>Cautions:</h4>
                 <ul>
                    <li><strong>Be Honest:</strong> Never lie or exaggerate your skills. Tailoring means highlighting the truth, not inventing it.</li>
                    <li><strong>Keep it Concise:</strong> Even with extra details, your resume should ideally remain one page, especially if you have less than 10 years of experience.</li>
                </ul>
            </div>

            <div className="card">
                <h3>Mastering Behavioral Questions</h3>
                <p>Behavioral questions are used to assess your past performance and soft skills. Always use the STAR method to structure your answers:</p>
                <ul>
                    <li><strong>Situation:</strong> Briefly describe the context of the situation you were in.</li>
                    <li><strong>Task:</strong> Explain what your responsibility was in that situation.</li>
                    <li><strong>Action:</strong> Detail the specific steps you took to address the task.</li>
                    <li><strong>Result:</strong> Share the outcome of your actions, quantifying the impact whenever possible.</li>
                </ul>
                <h4>Cautions:</h4>
                <ul>
                    <li><strong>Avoid Rambling:</strong> Keep your answers concise and to the point. The STAR method helps with this.</li>
                    <li><strong>Stay Positive:</strong> Don't speak negatively about past employers, colleagues, or projects. Frame challenges as learning opportunities.</li>
                    <li><strong>Be Authentic:</strong> Don't invent stories. Interviewers can often tell, and it's better to be honest about your experiences.</li>
                </ul>
            </div>

            <div className="card">
                <h3>Asking Smart Questions</h3>
                <p>At the end of the interview, you'll almost always be asked if you have any questions. This is a crucial opportunity to show your interest and intelligence. Prepare a few thoughtful questions in advance.</p>
                <ul>
                    <li>Ask about the team's biggest challenges and recent successes.</li>
                    <li>Inquire about the company culture and what makes someone successful there.</li>
                    <li>Avoid asking about salary or benefits until you have an offer.</li>
                </ul>
                <h4>Cautions:</h4>
                <ul>
                    <li><strong>Do Your Research:</strong> Don't ask questions that could be easily answered by a quick search on the company's website.</li>
                    <li><strong>Listen Carefully:</strong> Avoid asking a question that has already been answered during the interview.</li>
                </ul>
            </div>
             <div className="card">
                <h3>Technical Interview Strategy</h3>
                <p>When you get a technical problem, don't just jump into coding. Communicate your thought process clearly.</p>
                <ul>
                    <li><strong>Clarify:</strong> Make sure you understand the question and its constraints. Ask clarifying questions.</li>
                    <li><strong>Plan:</strong> Outline your approach and discuss the potential trade-offs of different solutions.</li>
                    <li><strong>Implement:</strong> Write clean, well-structured code. Talk through what you're doing as you write it.</li>
                    <li><strong>Test:</strong> Once you're done, test your code with a few examples, including edge cases.</li>
                </ul>
                <h4>Cautions:</h4>
                <ul>
                    <li><strong>Don't Stay Silent:</strong> Long periods of silence can be mistaken for confusion. Always articulate your thoughts, even if you're stuck.</li>
                    <li><strong>Don't Rush to Code:</strong> Planning your approach first is more important than starting to code immediately. A well-thought-out plan saves time later.</li>
                    <li><strong>Don't Ignore Hints:</strong> If the interviewer gives you a hint, take it. It's a sign they want to help you move forward.</li>
                </ul>
            </div>
        </div>
    );
};

export default TipsAndTricks;
