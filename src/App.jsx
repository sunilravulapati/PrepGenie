import React, { useState, useMemo } from 'react';
import { useUser } from '@clerk/clerk-react';
import Header from './components/Header';
import Sidebar from './components/Sidebar';
import Dashboard from './pages/Dashboard';
import Questions from './pages/Questions';
import Theory from './pages/Theory';
import TipsAndTricks from './pages/TipsAndTricks';
import Interviews from './pages/Interviews';
import HomePage from './pages/HomePage';
import AIHub from './pages/AIHub';
import { initialTheoryContent, initialQuestions } from './data';

function App() {
  const { isSignedIn, user, isLoaded } = useUser();
  const [currentPage, setCurrentPage] = useState('Dashboard');
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
  const [interviews, setInterviews] = useState([{ id: 1, role: 'Frontend Developer', company: 'TechCorp Inc.', date: '2025-09-15' }]);
  const [theoryContent, setTheoryContent] = useState(initialTheoryContent);
  const [questions, setQuestions] = useState(initialQuestions);
  const [activityLog, setActivityLog] = useState({});
  const [uploadedFiles, setUploadedFiles] = useState([]);
  const [history, setHistory] = useState([]); // State for dynamic history

  const addInterview = (newInterview) => {
      setInterviews([...interviews, newInterview]);
  };

  const addTheoryTopic = (topic, content) => {
      if (theoryContent[topic]) {
          alert(`Topic "${topic}" already exists!`);
          return;
      }
      const newTopic = {
          title: topic,
          summary: "This topic was generated by AI.",
          points: content.split('\n').filter(line => line.trim().startsWith('*') || /^\d+\./.test(line.trim()))
      };
      setTheoryContent({ ...theoryContent, [topic]: newTopic });
      setCurrentPage('Theory');
  };

  const addUploadedFile = (file) => {
      const newFile = {
          name: file.name,
          url: URL.createObjectURL(file)
      };
      setUploadedFiles(prevFiles => [...prevFiles, newFile]);
  };

  const updateQuestionStatus = (questionId, newStatus) => {
      let questionTitle = '';
      setQuestions(questions.map(q => {
          if (q.id === questionId) {
              questionTitle = q.title;
              return { ...q, status: newStatus };
          }
          return q;
      }));
      
      if (newStatus === 'done' || newStatus === 'review') {
          const today = new Date().toISOString().split('T')[0];
          const newHistoryEntry = {
              id: Date.now(),
              title: questionTitle,
              status: newStatus === 'done' ? 'Completed' : 'To Review',
              date: today
          };
          setHistory(prevHistory => [newHistoryEntry, ...prevHistory]);

          if (newStatus === 'done') {
              setActivityLog(prevLog => ({
                  ...prevLog,
                  [today]: (prevLog[today] || 0) + 1
              }));
          }
      }
  };

  const addGeneratedQuestions = (newQuestions) => {
      const questionsWithUniqueIds = newQuestions.map(q => ({
          ...q,
          id: Date.now() + Math.random(),
          isGenerated: true
      }));
      setQuestions(prevQuestions => [...questionsWithUniqueIds, ...prevQuestions]);
  };

  const dashboardStats = useMemo(() => {
      const completed = questions.filter(q => q.status === 'done').length;
      const toReview = questions.filter(q => q.status === 'review').length;
      const total = questions.length;
      const masteryScore = total > 0 ? Math.round((completed / total) * 100) : 0;
      return { total, completed, toReview, masteryScore };
  }, [questions]);

  const toggleSidebar = () => setIsSidebarCollapsed(!isSidebarCollapsed);

  const renderPage = () => {
    switch (currentPage) {
      case 'Dashboard':
        return <Dashboard interviews={interviews} stats={dashboardStats} activityLog={activityLog} history={history} />;
      case 'Questions':
        return <Questions 
                    questions={questions} 
                    updateQuestionStatus={updateQuestionStatus} 
                    addGeneratedQuestions={addGeneratedQuestions}
                />;
      case 'Theory':
        return <Theory 
                    theoryContent={theoryContent} 
                    uploadedFiles={uploadedFiles} 
                    addUploadedFile={addUploadedFile} 
                />;
      case 'Tips & Tricks':
        return <TipsAndTricks />;
      case 'Interviews':
        return <Interviews interviews={interviews} addInterview={addInterview} />;
      case 'AI Hub':
        return <AIHub addTheoryTopic={addTheoryTopic} />;
      case 'Motivation':
        return <Motivation />;
      case 'Future Updates':
        return <FutureUpdates />;
      default:
        return <Dashboard interviews={interviews} stats={dashboardStats} activityLog={activityLog} history={history} />;
    }
  };
  
  if (!isLoaded) return <div>Loading...</div>;
  if (!isSignedIn) return <HomePage />;

  return (
    <div className="app-container">
      <Sidebar 
        currentPage={currentPage} 
        setCurrentPage={setCurrentPage}
        isCollapsed={isSidebarCollapsed}
        toggleSidebar={toggleSidebar}
      />
      <div className={`main-content ${isSidebarCollapsed ? 'collapsed' : ''}`}>
        <Header 
          currentPage={currentPage} 
          user={user}
        />
        <main>{renderPage()}</main>
      </div>
    </div>
  );
}

export default App;